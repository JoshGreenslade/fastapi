name: Build and Deploy Code

on: [push, pull_request]

jobs: 
  build:
    environment: 
      name: Testing
    env:
      DB_HOST: ${{secrets.DB_HOST}}
      DB_NAME: ${{secrets.DB_NAME}}
      DB_USR: ${{secrets.DB_USR}}
      DB_PWD: ${{secrets.DB_PWD}}
      AUTH_SECRET_KEY: ${{secrets.AUTH_SECRET_KEY}}
      AUTH_ALGORITHM: ${{secrets.AUTH_ALGORITHM}}
      AUTH_EXPIRE_TIME_MIN: ${{secrets.AUTH_EXPIRE_TIME_MIN}}


    services: 
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DB_PWD}}
          POSTGRES_DB: ${{secrets.DB_NAME}}_test
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps: 
      - name: Pull Git Repo
        uses: actions/checkout@v2
      
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Update Pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest
          pytest

      # DOCKER STUFF
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Set up Docker Builds
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment: 
      name: production
    steps:
      - name: Pull Git Repo
        uses: actions/checkout@v2
        
      - name: Deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}